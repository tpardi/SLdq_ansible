---
- name: This playbook is for installating or upgrading Networker
  become: true
  hosts: all

  tasks:
  - name: Copy the LGTO installation files
    copy:
      src: /fs011/lgto/aix/lgto/
      dest: /tmp/NEW/
      mode: 755
    when: "group == 'aix_servers' and backup == 'yes' or backup == 'restore_only"
    notify: NSR_shut

  - name: Copy the NMDA installation files
    copy:
      src: /fs011/lgto/aix/nmda/
      dest: /tmp/NEW/
      mode: 755
    when: "appfunc == 'db'"
  
  - name: Check Networker service enabled Redhat Linux
    ansible.builtin.service:
      name: networker.service
      enabled: yes
    when: ansible_distribution == 'RedHat'

  - name: Install Networker Redhat Linux
    ansible.builtin.dnf:
      name:
        - http://10.93.221.83/rhel-8.6/lgtoclnt-19.11.0.0-1.i686.rpm
        - http://10.93.221.83/rhel-8.6/lgtoxtdclnt-19.11.0.0-1.i686.rpm
        - http://10.93.221.83/rhel-8.6/lgtoman-19.11.0.0-1.i686.rpm
      disable_gpg_check: True
      state: latest
    when: ansible_distribution == 'RedHat'
    notify:
      - Enable Networker service
      - Restart Networker service

  - name: Install Networker NMDA Redhat Linux
    ansible.builtin.dnf:
      name: http://10.93.221.83/rhel-8.6/lgtonmda-19.7.0.5-1.x86_64.rpm
      disable_gpg_check: True
      state: latest
    when: "ansible_distribution == 'RedHat' and appfunc == 'db'"

  - name: Install Networker AIX
    ansible.builtin.shell: cd /tmp/NEW; installp -acXd . LGTOnw.clnt.rte LGTOnw.man.rte LGTOnw.xtdclnt.rte
    notfiy:
      - NSR_start
    when: ansible_distribution == 'AIX'

  - name: Install Networker NMDA AIX
    ansible.builtin.shell: cd /tmp/NEW; installp -acXd . LGTOnmda.rte
    when: "ansible_distribution == 'AIX' and appfunc == 'db'"
    notify:
      - NSR_start

  - name: Create a symbolic link
    ansible.builtin.shell: . /home/oracle/19c.env; cd ${ORACLE_HOME}/lib; ln -s /usr/lib/libnsrora.so libobk.so
    when: "appfunc == 'db'"

    handlers:
  - name : Enable Networker service
    ansible.builtin.service:
      name: networker.service
      enabled: yes

  - name: Restart Networker service
    ansible.builtin.service:
      name: networker.service
      state: restarted

  - name: NSR_shut
    ansible.builtin.shell: /usr/bin/nsr_shutdown

  - name: NSR_start
    ansible.builtin.shell: /usr/bin/nsr_shutdown; /etc/rc.nsr
